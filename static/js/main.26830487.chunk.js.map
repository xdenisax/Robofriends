{"version":3,"sources":["constants.js","reducers.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","src","alt","CardList","console","log","map","robot","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.26830487.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false, \r\n    robots: [], \r\n    error: \"\"\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n    switch ( action.type ) {\r\n        case REQUEST_ROBOTS_PENDING: \r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false }\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow tc\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{ name }</h2>\r\n                <p>{ email }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => { \r\n    console.log(\"Cardlist rendered\");\r\n    return(\r\n        robots.map( robot => {\r\n            return (\r\n                <Card \r\n                    key={robot.id} \r\n                    id = { robot.id } \r\n                    name = { robot.name } \r\n                    email = { robot.email }\r\n                />\r\n            )\r\n        })\r\n    ); \r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox  = ({ searchfield, searchChange }) => {\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\"\r\n                onChange = { searchChange }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children} \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super(); \r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate( nextProps, nextState) {\r\n        return this.state.count !== nextState.count;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState( state => { \r\n            return { count: state.count + 1 }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <button color= {this.props.color} onClick = { this.updateCount }>Count {this.state.count}</button>\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate( nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return ( \r\n            <div> \r\n                <h1 className='f1'>Robofriends</h1>\r\n                <CounterButton color={'red'}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React  from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        searchfield: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots, \r\n        isPending: state.requestRobots.isPending, \r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)), \r\n        onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nclass App extends React.Component{ \r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchfield, onSearchChange, robots, isPending }  = this.props;\r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        });\r\n        return isPending \r\n        ? <h1>Loading...</h1>\r\n        :\r\n            <div className=\"tc\">\r\n                <Header/>\r\n                <Searchbox searchChange = { onSearchChange }/>\r\n                <Scroll>\r\n                    <CardList robots = { filteredRobots }/>\r\n                </Scroll>\r\n            </div>      \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers'; \n// import { createLogger } from 'redux-logger';\nimport App from './containers/App';\nimport thunkMiddleware from 'redux-thunk'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore( rootReducer, applyMiddleware(thunkMiddleware) ); //logger\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider  store = { store }>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change \n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}